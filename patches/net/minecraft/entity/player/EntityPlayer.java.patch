--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -9,8 +9,6 @@
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
-import net.minecraft.block.BlockBed;
-import net.minecraft.block.BlockHorizontal;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
@@ -32,7 +30,6 @@
 import net.minecraft.entity.passive.EntityHorse;
 import net.minecraft.entity.passive.EntityPig;
 import net.minecraft.entity.projectile.EntityFishHook;
-import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.init.MobEffects;
 import net.minecraft.init.SoundEvents;
@@ -96,6 +93,12 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+
+//CraftBukkit start
+
+// CraftBukkit end
+
 @SuppressWarnings("incomplete-switch")
 public abstract class EntityPlayer extends EntityLivingBase
 {
@@ -147,7 +150,17 @@
     private ItemStack itemStackMainHand;
     private final CooldownTracker cooldownTracker = this.createCooldownTracker();
     public EntityFishHook fishEntity;
-
+    // CraftBukkit start
+    public boolean fauxSleeping;
+    public String spawnWorld = "";
+    public int oldLevel = -1;
+    
+    @Override
+    public CraftHumanEntity getBukkitEntity() {
+    	return (CraftHumanEntity) super.getBukkitEntity();
+    }
+    // CraftBukkit end
+    
     protected CooldownTracker createCooldownTracker()
     {
         return new CooldownTracker();
@@ -437,6 +450,10 @@
     {
         return this.getHealth() <= 0.0F || this.isPlayerSleeping();
     }
+    
+    public boolean isMovementBlockedCB() {
+    	return isMovementBlocked();
+    }
 
     public void closeScreen()
     {
@@ -1078,14 +1095,16 @@
         return (float)i / (float)this.inventory.armorInventory.length;
     }
 
-    protected void damageEntity(DamageSource damageSrc, float damageAmount)
-    {
+    protected void damageEntity(DamageSource damageSrc, float damageAmount) {
+        this.damageEntity0(damageSrc,damageAmount);
+    }
+    protected boolean damageEntity0(DamageSource damageSrc, float damageAmount){
         if (!this.isEntityInvulnerable(damageSrc))
         {
             damageAmount = net.minecraftforge.common.ForgeHooks.onLivingHurt(this, damageSrc, damageAmount);
-            if (damageAmount <= 0) return;
+            if (damageAmount <= 0) return false;
             damageAmount = net.minecraftforge.common.ISpecialArmor.ArmorProperties.applyArmor(this, inventory.armorInventory, damageSrc, damageAmount);
-            if (damageAmount <= 0) return;
+            if (damageAmount <= 0) return false;
             damageAmount = this.applyPotionDamageCalculations(damageSrc, damageAmount);
             float f = damageAmount;
             damageAmount = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
@@ -1104,6 +1123,7 @@
                 }
             }
         }
+        return true;
     }
 
     public void openEditSign(TileEntitySign signTile)
