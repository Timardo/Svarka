--- ../src-base/minecraft/net/minecraft/network/NetworkManager.java
+++ ../src-work/minecraft/net/minecraft/network/NetworkManager.java
@@ -79,7 +79,12 @@
     private final Queue<NetworkManager.InboundHandlerTuplePacketListener> outboundPacketsQueue = Queues.<NetworkManager.InboundHandlerTuplePacketListener>newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
     private Channel channel;
-    private SocketAddress socketAddress;
+    public SocketAddress socketAddress;
+    // Spigot Start // PAIL
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
     private INetHandler packetListener;
     private ITextComponent terminationReason;
     private boolean isEncrypted;
@@ -157,13 +162,14 @@
 
     public void setNetHandler(INetHandler handler)
     {
-        Validate.notNull(handler, "packetListener", new Object[0]);
+        Validate.notNull(handler, "packetListener");
         LOGGER.debug("Set listener of {} to {}", new Object[] {this, handler});
         this.packetListener = handler;
     }
 
     public void sendPacket(Packet<?> packetIn)
     {
+        if(packetIn == null) return;
         if (this.isChannelOpen())
         {
             this.flushOutboundQueue();
@@ -186,6 +192,7 @@
 
     public void sendPacket(Packet<?> packetIn, GenericFutureListener <? extends Future <? super Void >> listener, GenericFutureListener <? extends Future <? super Void >> ... listeners)
     {
+        if(packetIn == null) return;
         if (this.isChannelOpen())
         {
             this.flushOutboundQueue();
@@ -463,6 +470,10 @@
         return channel;
     }
 
+    public SocketAddress getRawAddress(){
+        return this.channel.remoteAddress(); // Spigot
+    }
+
     static class InboundHandlerTuplePacketListener
         {
             private final Packet<?> packet;
