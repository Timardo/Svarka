--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -16,19 +16,14 @@
 import io.netty.handler.codec.base64.Base64;
 import java.awt.GraphicsEnvironment;
 import java.awt.image.BufferedImage;
+import java.io.Console;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.Proxy;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Queue;
-import java.util.Random;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
@@ -52,6 +47,7 @@
 import net.minecraft.profiler.Profiler;
 import net.minecraft.profiler.Snooper;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.IProgressUpdate;
@@ -66,33 +62,53 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.GameType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerMulti;
-import net.minecraft.world.WorldSettings;
-import net.minecraft.world.WorldType;
+import net.minecraft.world.*;
 import net.minecraft.world.chunk.storage.AnvilSaveConverter;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.demo.DemoWorldServer;
 import net.minecraft.world.storage.ISaveFormat;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.fml.common.Loader;
+import net.minecraftforge.fml.common.LoaderState;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.*;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
+import org.bukkit.event.world.WorldInitEvent;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.event.world.WorldSaveEvent;
+import org.bukkit.generator.ChunkGenerator;
 
+//CraftBukkit start
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
+import ru.svarka.SvarkaConfig;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.event.world.WorldInitEvent;
+import org.bukkit.generator.ChunkGenerator;
+import ru.svarka.SvarkaUtils;
+
+import static org.bukkit.Bukkit.getAllowNether;
+// CraftBukkit end
+
 public abstract class MinecraftServer implements Runnable, ICommandSender, IThreadListener, ISnooperInfo
 {
-    private static final Logger LOG = LogManager.getLogger();
+    public static final Logger LOG = LogManager.getLogger();
     public static final File USER_CACHE_FILE = new File("usercache.json");
-    private final ISaveFormat anvilConverterForAnvilFile;
+    public ISaveFormat anvilConverterForAnvilFile;
     private final Snooper usageSnooper = new Snooper("server", this, getCurrentTimeMillis());
-    private final File anvilFile;
+    public File anvilFile;
     private final List<ITickable> tickables = Lists.<ITickable>newArrayList();
     public final ICommandManager commandManager;
     public final Profiler theProfiler = new Profiler();
@@ -146,21 +162,67 @@
     private long currentTime = getCurrentTimeMillis();
     @SideOnly(Side.CLIENT)
     private boolean worldIconSet;
+    // CraftBukkit start
+    public List<WorldServer> worlds = new ArrayList<WorldServer>();
+    public org.bukkit.craftbukkit.CraftServer server;
+    public OptionSet options;
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+    public ConsoleReader reader;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public final Thread primaryThread;
+    public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    public SvarkaConfig svarkaConfig;
+    private static final int TPS = 20;
+    private static final int TICK_TIME = 1000000000 / TPS;
+    private static final int SAMPLE_INTERVAL = 100;
+    public final double[] recentTps = new double[ 3 ];
+    // CraftBukkit end
 
-    public MinecraftServer(File anvilFileIn, Proxy proxyIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
+    public MinecraftServer(OptionSet options, Proxy proxyIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
         this.serverProxy = proxyIn;
         this.authService = authServiceIn;
         this.sessionService = sessionServiceIn;
         this.profileRepo = profileRepoIn;
         this.profileCache = profileCacheIn;
-        this.anvilFile = anvilFileIn;
+        //this.anvilFile = anvilFileIn; // CraftBukkit
         this.networkSystem = new NetworkSystem(this);
         this.commandManager = this.createNewCommandManager();
-        this.anvilConverterForAnvilFile = new AnvilSaveConverter(anvilFileIn, dataFixerIn);
+        this.svarkaConfig = new SvarkaConfig();
+        //this.anvilConverterForAnvilFile = new AnvilSaveConverter(anvilFileIn, dataFixerIn); // CraftBukkit - moved to DedicatedServer.init
         this.dataFixer = dataFixerIn;
+        // CraftBukkit start
+        this.options = options;
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
+        	System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+        	Main.useJline = false;
+        }
+
+        try {
+        	reader = new ConsoleReader(System.in, System.out);
+        	reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+        } catch (Throwable e) {
+        	try {
+        		// Try again with jline disabled for Windows users without C++ 2008 Redistributable
+        		System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+        		System.setProperty("user.language", "en");
+        		Main.useJline = false;
+        		reader = new ConsoleReader(System.in, System.out);
+        		reader.setExpandEvents(false);
+        	} catch (IOException ex) {
+        		LOG.warn((String) null, ex);
+        	}
+        }
+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
+        this.serverThread = primaryThread = new Thread(this, "Server thread"); // Moved from main
     }
 
+    public abstract PropertyManager getPropertyManager();
+    // CraftBukkit end
+
     public ServerCommandManager createNewCommandManager()
     {
         return new ServerCommandManager(this);
@@ -219,41 +281,52 @@
     {
         this.convertMapIfNeeded(saveName);
         this.setUserMessage("menu.loadingLevel");
-        ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(saveName, true);
-        this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
-        WorldInfo worldinfo = isavehandler.loadWorldInfo();
-        WorldSettings worldsettings;
-
-        if (worldinfo == null)
+        ISaveHandler iSaveHandler = new AnvilSaveHandler(server.getWorldContainer(),worldNameIn,true, this.dataFixer);
+        this.setResourcePackFromWorld(this.getFolderName(), iSaveHandler);
+        WorldInfo worldinfo = iSaveHandler.loadWorldInfo();
+        WorldSettings worldsettings = new WorldSettings(seed,this.getGameType(),this.canStructuresSpawn(),this.isHardcore(),type);
+        worldsettings.setGeneratorOptions(generatorOptions);
+        if(worldinfo == null){
+            worldinfo = new WorldInfo(worldsettings,worldNameIn);
+        }
+        worldinfo.checkName(worldNameIn);
+        //worldinfo.setWorldName(worldNameIn);
+        WorldServer overWorld = (WorldServer)(isDemo() ? new DemoWorldServer(this, iSaveHandler, worldinfo, 0, theProfiler).init() : new WorldServer(this, iSaveHandler, worldinfo, 0, theProfiler, org.bukkit.World.Environment.getEnvironment(0), this.server.getGenerator(worldNameIn)).init());
+        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
         {
-            if (this.isDemo())
-            {
-                worldsettings = DemoWorldServer.DEMO_WORLD_SETTINGS;
-            }
-            else
-            {
-                worldsettings = new WorldSettings(seed, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), type);
-                worldsettings.setGeneratorOptions(generatorOptions);
+            String worldType = "";
+            String name = "";
+            String oldName = "";
 
-                if (this.enableBonusChest)
-                {
-                    worldsettings.enableBonusChest();
+            WorldServer world;
+            org.bukkit.generator.ChunkGenerator gen = null;
+            org.bukkit.World.Environment env = org.bukkit.World.Environment.getEnvironment(dim);
+            if(dim != 0) {
+                if ((dim == -1) && !this.getAllowNether() || (dim == 1 && !this.server.getAllowEnd())) continue;
+                worldType = env.toString().toLowerCase();
+                name = "DIM" + dim;
+                oldName = worldNameIn + "_" + worldType;
+                oldName = oldName.replaceAll(" ", "_");
+                if (!svarkaConfig.isBoolean("world-settings." + worldType + ".enabled")) {
+                    svarkaConfig.set("world-settings." + worldType + ".enabled", true);
                 }
+                boolean enabled = svarkaConfig.getBoolean("world-settings." + worldType + ".enabled", true);
+                svarkaConfig.save();
+                if (!enabled) continue;
+                gen = this.server.getGenerator(name);
+                SvarkaUtils.migrateWorlds(worldType, oldName, saveName, name);
+                this.setUserMessage(name);
             }
-
-            worldinfo = new WorldInfo(worldsettings, worldNameIn);
-        }
-        else
-        {
-            worldinfo.setWorldName(worldNameIn);
-            worldsettings = new WorldSettings(worldinfo);
-        }
-
-        WorldServer overWorld = (WorldServer)(isDemo() ? new DemoWorldServer(this, isavehandler, worldinfo, 0, theProfiler).init() : new WorldServer(this, isavehandler, worldinfo, 0, theProfiler).init());
-        overWorld.initialize(worldsettings);
-        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
-        {
-            WorldServer world = (dim == 0 ? overWorld : (WorldServer)new WorldServerMulti(this, isavehandler, dim, overWorld, theProfiler).init());
+            ISaveHandler worldServerMulti = new AnvilSaveHandler(server.getWorldContainer(), name, true, dataFixer);
+            worldinfo = worldServerMulti.loadWorldInfo();
+            if(worldinfo == null){
+                worldinfo = new WorldInfo(worldsettings,name);
+            }
+            worldinfo.checkName(name);
+            world = (dim == 0 ? overWorld: new WorldServerMulti(this, worldServerMulti, dim, overWorld, this.theProfiler, worldinfo, env, gen));
+            world.initialize(worldsettings);
+            this.server.scoreboardManager = new CraftScoreboardManager(this, world.getScoreboard());
+            this.server.getPluginManager().callEvent(new WorldInitEvent(world.getWorld()));
             world.addEventListener(new ServerWorldEventHandler(this, world));
 
             if (!this.isSinglePlayer())
@@ -261,44 +334,52 @@
                 world.getWorldInfo().setGameType(this.getGameType());
             }
             net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
-        }
+            this.server.getPluginManager().callEvent(new WorldInitEvent(world.getWorld()));
+            getPlayerList().setPlayerManager(worlds.toArray(new WorldServer[worlds.size()]));
 
-        this.playerList.setPlayerManager(new WorldServer[]{ overWorld });
+        }
+        this.playerList.setPlayerManager(this.worldServers);
         this.setDifficultyForAllWorlds(this.getDifficulty());
         this.initialWorldChunkLoad();
     }
 
     public void initialWorldChunkLoad()
     {
-        int i = 16;
-        int j = 4;
-        int k = 192;
-        int l = 625;
+        //int i = 16;
+        //int j = 4;
+        //int k = 192;
+        //int l = 625;
         int i1 = 0;
         this.setUserMessage("menu.generatingTerrain");
-        int j1 = 0;
-        LOG.info("Preparing start region for level 0");
-        WorldServer worldserver = net.minecraftforge.common.DimensionManager.getWorld(j1);
-        BlockPos blockpos = worldserver.getSpawnPoint();
-        long k1 = getCurrentTimeMillis();
-
-        for (int l1 = -192; l1 <= 192 && this.isServerRunning(); l1 += 16)
-        {
-            for (int i2 = -192; i2 <= 192 && this.isServerRunning(); i2 += 16)
+        for(int m = 0; m < worldServers.length; m++){
+            WorldServer worldserver = this.worldServers[m];
+            LOG.info("Preparing start region for level " + m + " (Seed: " + worldserver.getSeed() + ")");
+            if(!worldserver.getWorld().getKeepSpawnInMemory()){
+                continue;
+            }
+            BlockPos blockpos = worldserver.getSpawnPoint();
+            long k1 = getCurrentTimeMillis();
+            i1 = 0;
+            for (int l1 = -192; l1 <= 192 && this.isServerRunning(); l1 += 16)
             {
-                long j2 = getCurrentTimeMillis();
-
-                if (j2 - k1 > 1000L)
+                for (int i2 = -192; i2 <= 192 && this.isServerRunning(); i2 += 16)
                 {
-                    this.outputPercentRemaining("Preparing spawn area", i1 * 100 / 625);
-                    k1 = j2;
-                }
+                    long j2 = getCurrentTimeMillis();
 
-                ++i1;
-                worldserver.getChunkProvider().provideChunk(blockpos.getX() + l1 >> 4, blockpos.getZ() + i2 >> 4);
+                    if (j2 - k1 > 1000L)
+                    {
+                        this.outputPercentRemaining("Preparing spawn area", i1 * 100 / 625);
+                        k1 = j2;
+                    }
+
+                    ++i1;
+                    worldserver.getChunkProvider().loadChunk(blockpos.getX() + l1 >> 4, blockpos.getZ() + i2 >> 4);
+                }
             }
         }
-
+        for(WorldServer worldServer : this.worldServers){
+            this.server.getPluginManager().callEvent(new WorldLoadEvent(worldServer.getWorld()));
+        }
         this.clearCurrentTask();
     }
 
@@ -337,81 +418,100 @@
     {
         this.currentTask = null;
         this.percentDone = 0;
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD); // CraftBukkit
     }
 
-    public void saveAllWorlds(boolean isSilent)
+    public void saveAllWorlds(boolean isSilent) throws MinecraftException
     {
-        for (WorldServer worldserver : this.worldServers)
-        {
+
+        for(int m = 0; m < worlds.size(); m++){
+            WorldServer worldserver = this.worlds.get(m);
             if (worldserver != null)
             {
                 if (!isSilent)
                 {
                     LOG.info("Saving chunks for level \'{}\'/{}", new Object[] {worldserver.getWorldInfo().getWorldName(), worldserver.provider.getDimensionType().getName()});
                 }
-
-                try
-                {
+                try {
                     worldserver.saveAllChunks(true, (IProgressUpdate)null);
+                    worldserver.saveLevel();
+                    worldserver.flush();
+                } catch (MinecraftException e){
+
                 }
-                catch (MinecraftException minecraftexception)
-                {
-                    LOG.warn(minecraftexception.getMessage());
-                }
+
+                WorldSaveEvent event = new WorldSaveEvent(worldserver.getWorld());
+                this.server.getPluginManager().callEvent(event);
+                // Svarka - save world configs
+                svarkaConfig.save();
+
             }
         }
     }
 
-    public void stopServer()
+    public void stopServer() throws ExceptionWorldConflict
     {
-        LOG.info("Stopping server");
+        if(Loader.instance().hasReachedState(LoaderState.SERVER_STARTED) && !serverStopped){
+            LOG.info("Stopping server");
 
-        if (this.getNetworkSystem() != null)
-        {
-            this.getNetworkSystem().terminateEndpoints();
-        }
+            // CraftBukkit start
+            if (this.server != null)
+            {
+                this.server.disablePlugins();
+            }
+            // CraftBukkit end
+            if (this.getNetworkSystem() != null)
+            {
+                this.getNetworkSystem().terminateEndpoints();
+            }
 
-        if (this.playerList != null)
-        {
-            LOG.info("Saving players");
-            this.playerList.saveAllPlayerData();
-            this.playerList.removeAllPlayers();
-        }
-
-        if (this.worldServers != null)
-        {
-            LOG.info("Saving worlds");
-
-            for (WorldServer worldserver : this.worldServers)
+            if (this.playerList != null)
             {
-                if (worldserver != null)
+                LOG.info("Saving players");
+                this.playerList.saveAllPlayerData();
+                this.playerList.removeAllPlayers();
+            }
+            try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
+            if (this.worldServers != null)
+            {
+                LOG.info("Saving worlds");
+
+                for (WorldServer worldserver : this.worldServers)
                 {
-                    worldserver.disableLevelSaving = false;
+                    if (worldserver != null)
+                    {
+                        worldserver.disableLevelSaving = false;
+                    }
                 }
-            }
 
-            this.saveAllWorlds(false);
+                try {
+                    this.saveAllWorlds(false);
+                } catch (MinecraftException e) {
+                    e.printStackTrace();
+                }
 
-            for (WorldServer worldserver1 : this.worldServers)
-            {
-                if (worldserver1 != null)
+                for (WorldServer worldserver1 : this.worldServers)
                 {
-                    net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(worldserver1));
-                    worldserver1.flush();
+                    if (worldserver1 != null)
+                    {
+                        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(worldserver1));
+                        worldserver1.flush();
+                    }
                 }
+
+                WorldServer[] tmp = worldServers;
+                for (WorldServer world : tmp)
+                {
+                    net.minecraftforge.common.DimensionManager.setWorld(world.provider.getDimension(), null, this);
+                }
             }
 
-            WorldServer[] tmp = worldServers;
-            for (WorldServer world : tmp)
+            if (this.usageSnooper.isSnooperRunning())
             {
-                net.minecraftforge.common.DimensionManager.setWorld(world.provider.getDimension(), null, this);
+                this.usageSnooper.stopSnooper();
             }
         }
 
-        if (this.usageSnooper.isSnooperRunning())
-        {
-            this.usageSnooper.stopSnooper();
-        }
     }
 
     public boolean isServerRunning()
@@ -436,43 +536,34 @@
                 this.statusResponse.setServerDescription(new TextComponentString(this.motd));
                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.10.2", 210));
                 this.applyServerIconToResponse(this.statusResponse);
+                DedicatedServer.allowPlayerLogins = true; // Svarka - server is ready, allow player logins
 
+                Arrays.fill( recentTps, 20 );
+                long lastTick = System.nanoTime(), catchupTime = 0, curTime, wait, tickSection = lastTick;
                 while (this.serverRunning)
                 {
                     long k = getCurrentTimeMillis();
                     long j = k - this.currentTime;
+                    curTime = System.nanoTime();
+                    wait = TICK_TIME - (curTime - lastTick) - catchupTime;
 
-                    if (j > 2000L && this.currentTime - this.timeOfLastWarning >= 15000L)
-                    {
-                        LOG.warn("Can\'t keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", new Object[] {Long.valueOf(j), Long.valueOf(j / 50L)});
-                        j = 2000L;
-                        this.timeOfLastWarning = this.currentTime;
+                    if (wait > 0) {
+                        Thread.sleep(wait / 1000000);
+                        catchupTime = 0;
+                        continue;
+                    } else {
+                        catchupTime = Math.min(1000000000, Math.abs(wait));
                     }
-
-                    if (j < 0L)
+                    if ( MinecraftServer.currentTick++ % SAMPLE_INTERVAL == 0 )
                     {
-                        LOG.warn("Time ran backwards! Did the system time change?");
-                        j = 0L;
+                        double currentTps = 1E9 / ( curTime - tickSection ) * SAMPLE_INTERVAL;
+                        recentTps[0] = calcTps( recentTps[0], 0.92, currentTps ); // 1/exp(5sec/1min)
+                        recentTps[1] = calcTps( recentTps[1], 0.9835, currentTps ); // 1/exp(5sec/5min)
+                        recentTps[2] = calcTps( recentTps[2], 0.9945, currentTps ); // 1/exp(5sec/15min)
+                        tickSection = curTime;
                     }
-
-                    i += j;
-                    this.currentTime = k;
-
-                    if (this.worldServers[0].areAllPlayersAsleep())
-                    {
-                        this.tick();
-                        i = 0L;
-                    }
-                    else
-                    {
-                        while (i > 50L)
-                        {
-                            i -= 50L;
-                            this.tick();
-                        }
-                    }
-
-                    Thread.sleep(Math.max(1L, 50L - i));
+                    lastTick = curTime;
+                    this.tick();
                     this.serverIsRunning = true;
                 }
                 net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopping();
@@ -537,6 +628,10 @@
         }
     }
 
+    private double calcTps(double avg, double exp, double tps) {
+        return (avg * exp) + (tps * (1 - exp));
+    }
+
     public void applyServerIconToResponse(ServerStatusResponse response)
     {
         File file1 = this.getFile("server-icon.png");
@@ -596,8 +691,9 @@
     {
     }
 
-    public void tick()
+    public void tick() throws ExceptionWorldConflict
     {
+        SpigotTimings.serverTickTimer.startTiming(); // Spigot
         long i = System.nanoTime();
         net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreServerTick();
         ++this.tickCounter;
@@ -629,12 +725,18 @@
             this.statusResponse.invalidateJson();
         }
 
-        if (this.tickCounter % 900 == 0)
+        if ((autosavePeriod > 0) && ((this.tickCounter % autosavePeriod) == 0)) //Svarka
         {
+            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             this.theProfiler.startSection("save");
             this.playerList.saveAllPlayerData();
-            this.saveAllWorlds(true);
+            try {
+                this.saveAllWorlds(true);
+            } catch (MinecraftException e) {
+                e.printStackTrace();
+            }
             this.theProfiler.endSection();
+            SpigotTimings.worldSaveTimer.stopTiming();
         }
 
         this.theProfiler.startSection("tallying");
@@ -661,13 +763,23 @@
     {
         this.theProfiler.startSection("jobs");
 
-        synchronized (this.futureTaskQueue)
+        Queue queue = this.futureTaskQueue;
+
+        // Spigot start
+        FutureTask<?> entry;
+        int count = this.futureTaskQueue.size();
+        while (count-- > 0 && (entry = this.futureTaskQueue.poll()) != null) {
+            Util.runTask(entry, MinecraftServer.LOG);
+        }
+        // Spigot end
+
+/*        synchronized (this.futureTaskQueue)
         {
             while (!this.futureTaskQueue.isEmpty())
             {
                 Util.runTask((FutureTask)this.futureTaskQueue.poll(), LOG);
             }
-        }
+        }*/
 
         this.theProfiler.endStartSection("levels");
         net.minecraftforge.common.chunkio.ChunkIOExecutor.tick();
@@ -831,7 +943,7 @@
 
     public List<String> getTabCompletions(ICommandSender sender, String input, @Nullable BlockPos pos, boolean hasTargetBlock)
     {
-        List<String> list = Lists.<String>newArrayList();
+        /*List<String> list = Lists.<String>newArrayList();
         boolean flag = input.startsWith("/");
 
         if (flag)
@@ -875,7 +987,8 @@
             }
 
             return list;
-        }
+        }*/
+        return server.tabComplete(sender,input);
     }
 
     public boolean isAnvilFileSet()
@@ -1320,6 +1433,13 @@
     {
         return this;
     }
+    
+    // CraftBukkit start
+    @Deprecated
+    public static MinecraftServer getServerInst() {
+    	return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+    }
+    // CraftBukkit end
 
     public int getMaxWorldSize()
     {
@@ -1400,10 +1520,14 @@
     @SideOnly(Side.SERVER)
     public static void main(String[] p_main_0_)
     {
+    	OptionSet options = org.bukkit.craftbukkit.Main.main(p_main_0_);
+    	if(options == null) 
+    		return;
         Bootstrap.register();
 
         try
         {
+        	/*
             boolean flag = true;
             String s = null;
             String s1 = ".";
@@ -1466,14 +1590,16 @@
                 {
                     ++j;
                 }
-            }
-
+            }*/
+        	String s1 = ".";
             YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
             PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s1, USER_CACHE_FILE.getName()));
-            final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataFixesManager.createFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
+            //final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataFixesManager.createFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
+            final DedicatedServer dedicatedserver = new DedicatedServer(options, DataFixesManager.createFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
 
+            /*
             if (s != null)
             {
                 dedicatedserver.setServerOwner(s);
@@ -1512,6 +1638,24 @@
                     dedicatedserver.stopServer();
                 }
             });
+            */
+            if (options.has("port")) {
+            	int port = (Integer) options.valueOf("port");
+            	if (port > 0) {
+            		dedicatedserver.setServerPort(port);
+            	}
+            }
+            	
+            if (options.has("universe")) {
+            	dedicatedserver.anvilFile = (File) options.valueOf("universe");
+            }
+            	
+            if (options.has("world")) {
+            	dedicatedserver.setWorldName((String) options.valueOf("world"));
+            }
+            	
+            dedicatedserver.primaryThread.start();
+            // CraftBukkit end
         }
         catch (Exception exception)
         {
@@ -1528,7 +1672,8 @@
     @SideOnly(Side.SERVER)
     public boolean isDebuggingEnabled()
     {
-        return false;
+        //return false;
+    	return this.getPropertyManager().getBooleanProperty("debug", false); // CraftBukkit - don't hardcode
     }
 
     @SideOnly(Side.SERVER)
