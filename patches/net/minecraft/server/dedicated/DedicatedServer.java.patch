--- ../src-base/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
+++ ../src-work/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
@@ -39,11 +39,28 @@
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
+import net.minecraft.world.chunk.storage.AnvilSaveConverter;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
+//CraftBukkit start
+import java.io.PrintStream;
+import org.apache.logging.log4j.Level;
+
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender;
+import org.bukkit.event.server.ServerCommandEvent;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.spigotmc.SpigotConfig;
+// CraftBukkit end
+
 @SideOnly(Side.SERVER)
 public class DedicatedServer extends MinecraftServer implements IServer
 {
@@ -51,18 +68,18 @@
     private static final Pattern RESOURCE_PACK_SHA1_PATTERN = Pattern.compile("^[a-fA-F0-9]{40}$");
     public final List<PendingCommand> pendingCommandList = Collections.<PendingCommand>synchronizedList(Lists.<PendingCommand>newArrayList());
     private RConThreadQuery theRConThreadQuery;
-    private final RConConsoleSource rconConsoleSource = new RConConsoleSource(this);
+    public final RConConsoleSource rconConsoleSource = new RConConsoleSource(this);
     private RConThreadMain theRConThreadMain;
-    private PropertyManager settings;
+    public PropertyManager settings;
     private ServerEula eula;
     private boolean canSpawnStructures;
     private GameType gameType;
     private boolean guiIsEnabled;
     public static boolean allowPlayerLogins = false;
 
-    public DedicatedServer(File anvilFileIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
+    public DedicatedServer(joptsimple.OptionSet options/*, File anvilFileIn*/, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
-        super(anvilFileIn, Proxy.NO_PROXY, dataFixerIn, authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
+        super(options, Proxy.NO_PROXY, dataFixerIn, authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
         Thread thread = new Thread("Server Infinisleeper")
         {
             {
@@ -92,6 +109,11 @@
         {
             public void run()
             {
+            	// CraftBukkit start
+            	if (!org.bukkit.craftbukkit.Main.useConsole) {
+            		return;
+            	}
+            	// CraftBukkit end
                 if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
                 BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in));
                 String s4;
@@ -121,7 +143,8 @@
         net.minecraftforge.fml.common.FMLCommonHandler.instance().onServerStart(this);
 
         LOGGER.info("Loading properties");
-        this.settings = new PropertyManager(new File("server.properties"));
+        //this.settings = new PropertyManager(new File("server.properties"));
+        this.settings = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         this.eula = new ServerEula(new File("eula.txt"));
 
         if (!this.eula.hasAcceptedEULA())
@@ -176,27 +199,38 @@
                 this.setServerPort(this.settings.getIntProperty("server-port", 25565));
             }
 
+            //org.spigotmc.SpigotConfig.init((File) options.valueOf("spigot-settings"));
+            //org.spigotmc.SpigotConfig.registerCommands();
+            this.setPlayerList(new DedicatedPlayerList(this));
             LOGGER.info("Generating keypair");
             this.setKeyPair(CryptManager.generateKeyPair());
             LOGGER.info("Starting Minecraft server on {}:{}", new Object[] {this.getServerHostname().isEmpty() ? "*" : this.getServerHostname(), Integer.valueOf(this.getServerPort())});
-
-            try
-            {
-                this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+            if(!SpigotConfig.lateBind){
+                try
+                {
+                    this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+                }
+                catch (IOException ioexception)
+                {
+                    LOGGER.warn("**** FAILED TO BIND TO PORT!");
+                    LOGGER.warn("The exception was: {}", new Object[] {ioexception.toString()});
+                    LOGGER.warn("Perhaps a server is already running on that port?");
+                    return false;
+                }
             }
-            catch (IOException ioexception)
-            {
-                LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                LOGGER.warn("The exception was: {}", new Object[] {ioexception.toString()});
-                LOGGER.warn("Perhaps a server is already running on that port?");
-                return false;
-            }
 
+            //this.setPlayerList(new DedicatedPlayerList(this));
             if (!this.isServerInOnlineMode())
             {
                 LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
                 LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+                if (org.spigotmc.SpigotConfig.bungee) {
+                    DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+                    DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+                } else {
+                    DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+                }
                 LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
             }
 
@@ -212,7 +246,8 @@
             else
             {
                 net.minecraftforge.fml.common.FMLCommonHandler.instance().onServerStarted();
-                this.setPlayerList(new DedicatedPlayerList(this));
+                //this.setPlayerList(new DedicatedPlayerList(this)); // CB - ^
+                this.anvilConverterForAnvilFile = new AnvilSaveConverter(this.server.getWorldContainer(), this.getDataFixer());
                 long j = System.nanoTime();
 
                 if (this.getFolderName() == null)
@@ -254,16 +289,16 @@
                 this.getOpPermissionLevel();
                 this.isSnooperEnabled();
                 this.getNetworkCompressionThreshold();
-                this.setBuildLimit(this.settings.getIntProperty("max-build-height", 256));
+                this.setBuildLimit(this.settings.getIntProperty("max-build1-height", 256));
                 this.setBuildLimit((this.getBuildLimit() + 8) / 16 * 16);
                 this.setBuildLimit(MathHelper.clamp_int(this.getBuildLimit(), 64, 256));
-                this.settings.setProperty("max-build-height", Integer.valueOf(this.getBuildLimit()));
+                this.settings.setProperty("max-build1-height", Integer.valueOf(this.getBuildLimit()));
                 TileEntitySkull.setProfileCache(this.getPlayerProfileCache());
                 TileEntitySkull.setSessionService(this.getMinecraftSessionService());
                 PlayerProfileCache.setOnlineMode(this.isServerInOnlineMode());
                 if (!net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerAboutToStart(this)) return false;
                 LOGGER.info("Preparing level \"{}\"", new Object[] {this.getFolderName()});
-                this.loadAllWorlds(this.getFolderName(), this.getFolderName(), k, worldtype, s2);
+                    this.loadAllWorlds(this.getFolderName(), this.getFolderName(), k, worldtype, s2);
                 long i1 = System.nanoTime() - j;
                 String s3 = String.format("%.3fs", new Object[] {Double.valueOf((double)i1 / 1.0E9D)});
                 LOGGER.info("Done ({})! For help, type \"help\" or \"?\"", new Object[] {s3});
@@ -280,8 +315,29 @@
                     LOGGER.info("Starting remote control listener");
                     this.theRConThreadMain = new RConThreadMain(this);
                     this.theRConThreadMain.startThread();
+                    this.remoteConsole = new CraftRemoteConsoleCommandSender(this.rconConsoleSource); // CB
                 }
+                // CraftBukkit start
+                if (this.server.getBukkitSpawnRadius() > -1) {
+                	DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
+                	this.settings.serverProperties.remove("spawn-protection");
+                	this.settings.getIntProperty("spawn-protection", this.server.getBukkitSpawnRadius());
+                	this.server.removeBukkitSpawnRadius();
+                	this.settings.saveProperties();
+                }
+                // CraftBukkit end
 
+                if (SpigotConfig.lateBind) {
+                    try {
+                        this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+                    } catch (IOException ioexception) {
+                        DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+                        DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
+                        DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+                        return false;
+                    }
+                }
+
                 if (this.getMaxTickTime() > 0L)
                 {
                     Thread thread1 = new Thread(new ServerHangWatchdog(this));
@@ -420,7 +476,14 @@
         while (!this.pendingCommandList.isEmpty())
         {
             PendingCommand pendingcommand = (PendingCommand)this.pendingCommandList.remove(0);
-            this.getCommandManager().executeCommand(pendingcommand.sender, pendingcommand.command);
+            //this.getCommandManager().executeCommand(pendingcommand.sender, pendingcommand.command);
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(console, pendingcommand.command);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            pendingcommand = new PendingCommand(event.getCommand(), pendingcommand.sender);
+            server.dispatchServerCommand(console, pendingcommand);
+            // CraftBukkit end
         }
     }
 
@@ -674,18 +737,70 @@
 
     public long getMaxTickTime()
     {
-        return this.settings.getLongProperty("max-tick-time", TimeUnit.MINUTES.toMillis(1L));
+        return this.settings.getLongProperty("max-tick-time", TimeUnit.MINUTES.toMillis(100L));
     }
 
     public String getPlugins()
     {
-        return "";
+        //return "";
+    	// CraftBukkit start - Whole method
+    	StringBuilder result = new StringBuilder();
+    	org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+    	result.append(server.getName());
+    	result.append(" on Bukkit ");
+    	result.append(server.getBukkitVersion());
+    	if (plugins.length > 0 && server.getQueryPlugins()) {
+    		result.append(": ");
+    		for (int i = 0; i < plugins.length; i++) {
+    			if (i > 0) {
+    				result.append("; ");
+    			}
+    			result.append(plugins[i].getDescription().getName());
+    			result.append(" ");
+    			result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+    		}
+    	}
+    	return result.toString();
+    	// CraftBukkit end
     }
 
-    public String handleRConCommand(String command)
+    public String handleRConCommand(final String command)
     {
-        this.rconConsoleSource.resetLog();
-        this.commandManager.executeCommand(this.rconConsoleSource, command);
-        return this.rconConsoleSource.getLogContents();
+        //this.rconConsoleSource.resetLog();
+        //this.commandManager.executeCommand(this.rconConsoleSource, command);
+        //return this.rconConsoleSource.getLogContents();
+    	Waitable<String> waitable = new Waitable<String>() {
+    		@Override
+    		protected String evaluate() {
+    			rconConsoleSource.resetLog();
+    			// Event changes start
+    			RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, command);
+    			server.getPluginManager().callEvent(event);
+    			if (event.isCancelled()) {
+    				return "";
+    			}
+    			// Event change end
+    			PendingCommand serverCommand = new PendingCommand(event.getCommand(), rconConsoleSource);
+    			server.dispatchServerCommand(remoteConsole, serverCommand);
+    			return rconConsoleSource.getLogContents();
+    		}
+    	};
+    	processQueue.add(waitable);
+    	try {
+    		return waitable.get();
+    	} catch (java.util.concurrent.ExecutionException e) {
+    		throw new RuntimeException("Exception processing rcon command " + command, e.getCause());
+    	} catch (InterruptedException e) {
+    		Thread.currentThread().interrupt(); // Maintain interrupted state
+    		throw new RuntimeException("Interrupted processing rcon command " + command, e);
+    	}
+    	// CraftBukkit end
     }
+    
+    // CraftBukkit start
+    @Override
+    public PropertyManager getPropertyManager() {
+    	return this.settings;
+    }
+    // CraftBukkit end
 }
